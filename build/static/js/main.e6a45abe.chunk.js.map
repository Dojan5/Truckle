{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","serviceWeight","setServiceWeight","frontAxleOverride","setFrontAxleOverride","backAxleOverride","setBackAxleOverride","rlTable","singleAxleNoPower","frontAxle","setFrontAxle","backAxle","setBackAxle","gwTable","grossWeight","setGrossWeight","displayKilos","setDisplayKilos","result","setResult","doCalculate","bk","frontOverrideValue","backOverrideValue","rlFront","parseFloat","rlBack","gW","frontAxleWeightAllowance","console","log","backAxleWeightAllowance","addedTogether","grossWeightAllowance","table","className","type","name","value","onChange","evt","target","values","Object","keys","map","key","r","i","onClick","checked","bk1","bk2","bk3","bk4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6a45abe.chunk.js","sourcesContent":["import \"./App.scss\";\nimport gwTable from \"./grossWeightTable.json\";\nimport rlTable from \"./roadLoadTable.json\";\nimport React, { useState } from \"react\";\nimport { Titlebar } from \"./components/titlebar\";\nimport { Menubar } from \"./components/menubar\";\n\nfunction App() {\n  const [serviceWeight, setServiceWeight] = useState(12000);\n  const [frontAxleOverride, setFrontAxleOverride] = useState(0);\n  const [backAxleOverride, setBackAxleOverride] = useState(0);\n  const [frontAxle, setFrontAxle] = useState(rlTable.singleAxleNoPower);\n  const [backAxle, setBackAxle] = useState(rlTable.singleAxleNoPower);\n  const [grossWeight, setGrossWeight] = useState(gwTable[0]);\n  const [displayKilos, setDisplayKilos] = useState(true);\n\n  const [result, setResult] = useState([0, 0, 0, 0]);\n\n  const handleServiceWeightChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setServiceWeight(value);\n  };\n\n  const handleFrontOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setFrontAxleOverride(value);\n  };\n\n  const handleBackOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setBackAxleOverride(value);\n  };\n\n  const handleFrontAxleChange = (evt) => {\n    let values = rlTable[evt.target.value];\n    setFrontAxle(values);\n  };\n\n  const handleBackAxleChange = (evt) => {\n    let values = rlTable[evt.target.value];\n    setBackAxle(values);\n  };\n\n  const handleGrossWeightChange = (evt) => {\n    let values = gwTable[evt.target.value];\n    setGrossWeight(values);\n  };\n\n  const doCalculate = (bk) => {\n    let frontOverrideValue =\n      frontAxleOverride < 1000 ? frontAxleOverride : frontAxleOverride / 1000;\n    let backOverrideValue =\n      backAxleOverride < 1000 ? backAxleOverride : backAxleOverride / 1000;\n    let rlFront = parseFloat(frontAxle[bk]);\n    let rlBack = parseFloat(backAxle[bk]);\n    let gW = parseFloat(grossWeight[bk]);\n\n    let frontAxleWeightAllowance =\n      frontOverrideValue <= rlFront ? frontOverrideValue : rlFront;\n    console.log(typeof frontAxleWeightAllowance);\n\n    let backAxleWeightAllowance =\n      backOverrideValue <= rlBack ? backOverrideValue : rlBack;\n    console.log(typeof backAxleWeightAllowance);\n\n    let addedTogether = frontAxleWeightAllowance + backAxleWeightAllowance;\n\n    let grossWeightAllowance = gW;\n    let result = addedTogether < grossWeightAllowance ? addedTogether : gW;\n\n    console.table({\n      frontAxleOverride,\n      backAxleOverride,\n      rlFront,\n      rlBack,\n      gW,\n      frontAxleWeightAllowance,\n      backAxleWeightAllowance,\n      addedTogether,\n      grossWeightAllowance,\n      result,\n    });\n    return result;\n  };\n\n  const calculate = (evt) => {\n    let bk1 = doCalculate(0);\n    let bk2 = doCalculate(1);\n    let bk3 = doCalculate(2);\n    let bk4 = doCalculate(3);\n\n    setResult([bk1, bk2, bk3, bk4]);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <fieldset>\n          <legend>Vehicle Specification</legend>\n          <div className=\"form-control\">\n            <label>Vehicle weight</label>\n            <input\n              type=\"number\"\n              name=\"weight\"\n              value={serviceWeight}\n              onChange={handleServiceWeightChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Front axle override</label>\n            <input\n              type=\"number\"\n              value={frontAxleOverride}\n              onChange={handleFrontOverrideChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle override</label>\n            <input\n              type=\"number\"\n              value={backAxleOverride}\n              onChange={handleBackOverrideChange}\n            />\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Table Settings</legend>\n          <div className=\"form-control\">\n            <label>Front axle</label>\n            <select name=\"frontAxle\" onChange={handleFrontAxleChange}>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle</label>\n            <select name=\"backAxle\" onChange={handleBackAxleChange}>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Weight Table</label>\n            <select name=\"grossWeight\" onChange={handleGrossWeightChange}>\n              {Object.keys(gwTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n        </fieldset>\n        <div className=\"result-table\">\n          <table>\n            <thead>\n              <tr>\n                <td className=\"header\">Class</td>\n                <td className=\"text-center header\">Weight Allowance</td>\n                <td className=\"text-right header\">Allowed Load</td>\n              </tr>\n            </thead>\n            <tbody>\n              {result.map((r, i) => (\n                <tr>\n                  <td className=\"header\">BK{i + 1}</td>\n                  <td className=\"text-center\">\n                    {displayKilos ? (<span>{r * 1000} kg</span>) : (<span>{r} t</span>)}\n                  </td>\n                  <td className=\"text-right\">\n                    {displayKilos ? (\n                      <span>{r * 1000 - serviceWeight} kg</span>\n                    ) : (\n                      <span>{r - serviceWeight} t</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"unit-toggle\">\n            <label\n              onClick={() => setDisplayKilos(!displayKilos)}\n            >Display in Kilogram</label>\n            <input\n              type=\"checkbox\"\n              checked={displayKilos}\n              onChange={() => setDisplayKilos(!displayKilos)}\n            />\n          </div>\n        </div>\n        <button className=\"btn\" onClick={calculate}>\n          Calculate\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}