{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","serviceWeight","setServiceWeight","frontAxleOverride","setFrontAxleOverride","backAxleOverride","setBackAxleOverride","rlTable","singleAxleNoPower","frontAxle","setFrontAxle","backAxle","setBackAxle","gwTable","grossWeight","setGrossWeight","result","setResult","doCalculate","bk","frontAxleWeightAllowance","parseFloat","backAxleWeightAllowance","addedTogether","grossWeightAllowance","console","log","className","type","name","value","onChange","evt","target","values","Object","keys","map","key","r","i","onClick","bk1","bk2","bk3","bk4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1571b3d6.chunk.js","sourcesContent":["import \"./App.scss\";\nimport gwTable from \"./grossWeightTable.json\";\nimport rlTable from \"./roadLoadTable.json\";\nimport React, { useState } from \"react\";\nimport { Titlebar } from \"./components/titlebar\";\nimport { Menubar } from \"./components/menubar\";\n\nfunction App() {\n  const [serviceWeight, setServiceWeight] = useState(12000);\n  const [frontAxleOverride, setFrontAxleOverride] = useState(0);\n  const [backAxleOverride, setBackAxleOverride] = useState(0);\n  const [frontAxle, setFrontAxle] = useState(rlTable.singleAxleNoPower);\n  const [backAxle, setBackAxle] = useState(rlTable.singleAxleNoPower);\n  const [grossWeight, setGrossWeight] = useState(gwTable[0]);\n\n  const [result, setResult] = useState([0, 0, 0, 0]);\n\n  const handleServiceWeightChange = (evt) => {\n    setServiceWeight(parseFloat(evt.target.value));\n  };\n\n  const handleFrontOverrideChange = (evt) => {\n    setFrontAxleOverride(parseFloat(evt.target.value));\n  };\n\n  const handleBackOverrideChange = (evt) => {\n    setBackAxleOverride(parseFloat(evt.target.value));\n  };\n\n  const handleFrontAxleChange = (evt) => {\n    let values = rlTable[evt.target.value];\n    setFrontAxle(values);\n  };\n\n  const handleBackAxleChange = (evt) => {\n    let values = rlTable[evt.target.value];\n    setBackAxle(values);\n  };\n\n  const handleGrossWeightChange = (evt) => {\n    let values = gwTable[evt.target.value];\n    setGrossWeight(values);\n  };\n\n  const doCalculate = (bk) => {\n    let frontAxleWeightAllowance =\n      frontAxleOverride < parseFloat(frontAxle[bk])\n        ? frontAxleOverride\n        : parseFloat(frontAxle[bk]);\n    //console.log(\"FrontAxleWeightAllowance: \", frontAxleWeightAllowance);\n    let backAxleWeightAllowance =\n      backAxleOverride < parseFloat(backAxle[bk])\n        ? backAxleOverride\n        : parseFloat(backAxle[bk]);\n    //console.log(\"BackAxleWeightAllowance: \", backAxleWeightAllowance);\n    let addedTogether =\n      parseFloat(frontAxleWeightAllowance) +\n      parseFloat(backAxleWeightAllowance);\n    let grossWeightAllowance = parseFloat(grossWeight[bk]);\n    let result =\n      addedTogether < grossWeightAllowance\n        ? addedTogether\n        : parseFloat(grossWeight[bk]);\n    console.log(\n      `BK: ${bk + 1}, AD: ${addedTogether}, GW: ${grossWeightAllowance}`\n    );\n    return result;\n  };\n\n  const calculate = (evt) => {\n    let bk1 = doCalculate(0);\n    let bk2 = doCalculate(1);\n    let bk3 = doCalculate(2);\n    let bk4 = doCalculate(3);\n\n    setResult([bk1, bk2, bk3, bk4]);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <fieldset>\n          <legend>Vehicle Specification</legend>\n          <div className=\"form-control\">\n            <label>Vehicle weight</label>\n            <input\n              type=\"number\"\n              name=\"weight\"\n              value={serviceWeight}\n              onChange={handleServiceWeightChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Front axle override</label>\n            <input\n              type=\"number\"\n              value={frontAxleOverride}\n              onChange={handleFrontOverrideChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle override</label>\n            <input\n              type=\"number\"\n              value={backAxleOverride}\n              onChange={handleBackOverrideChange}\n            />\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Table Settings</legend>\n          <div className=\"form-control\">\n            <label>Front axle</label>\n            <select name=\"frontAxle\" onChange={handleFrontAxleChange}>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle</label>\n            <select name=\"backAxle\" onChange={handleBackAxleChange}>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Weight Table</label>\n            <select name=\"grossWeight\" onChange={handleGrossWeightChange}>\n              {Object.keys(gwTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n        </fieldset>\n        <div className=\"result-table\">\n        <table>\n          <thead>\n            <tr>\n              <td className=\"header\">Class</td>\n              <td className=\"text-center header\">Weight Allowance</td>\n              <td className=\"text-right header\">Allowed Load</td>\n            </tr>\n          </thead>\n          <tbody>\n            {result.map((r, i) => (\n              <tr>\n                <td className=\"header\">BK{i + 1}</td>\n                <td className=\"text-center\">{r * 1}</td>\n                <td className=\"text-right\">{r * 1000 - serviceWeight} kg</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        </div>\n        <button className=\"btn\" onClick={calculate}>\n          Calculate\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}