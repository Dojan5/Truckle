{"version":3,"sources":["functions/calculations.ts","icons/calculatorIcon.tsx","icons/informationIcon.tsx","components/menubar.jsx","components/loadingSpinner.jsx","pages/loadingPage.jsx","App.js","reportWebVitals.js","localisation/i18n.ts","index.tsx"],"names":["BearingClass","CalculatorIcon","xmlns","viewBox","width","height","fill","d","InformationIcon","Menubar","useTranslation","t","className","to","icon","process","MenuButton","children","location","useLocation","navigate","useNavigate","match","pathname","onClick","LoadingSpinner","LoadingPage","class","grossWeightTable","_grossWeightTable","roadLoadTable","_roadLoadTable","calculateBearingClass","frontAxleOverride","backAxleOverride","frontAxleTableKey","backAxleTableKey","grossWeightTableKey","bClass","bk","frontAxleTableValue","getLoadWeightValue","backAxleTableValue","grossWeightTableValue","convertToKilo","vehicleWeightAllowanceSum","value","key","App","useState","serviceWeight","setServiceWeight","setFrontAxleOverride","setBackAxleOverride","frontAxle","setFrontAxle","backAxle","setBackAxle","grossWeight","setGrossWeight","displayKilos","setDisplayKilos","result","setResult","handleNumericInputFocus","evt","target","select","calculate","console","table","undefined","frontAxleOverrideInKg","backAxleOverrideInKg","BK1","BK2","BK3","BK4","calculateTS","type","name","onFocus","onChange","parseFloat","pattern","inputValue","toString","Object","keys","rlTable","map","gwTable","r","i","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","detection","order","caches","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.db685c77.chunk.js","sourcesContent":["import _grossWeightTable from '../data/grossWeightTable.json';\r\nimport _roadLoadTable from '../data/roadLoadTable.json';\r\n\r\nconst grossWeightTable = _grossWeightTable as DataTable;\r\nconst roadLoadTable = _roadLoadTable as DataTable;\r\n\r\nenum BearingClass {\r\n    BK1 = 0,\r\n    BK2 = 1,\r\n    BK3 = 2,\r\n    BK4 = 3\r\n}\r\n\r\ntype CalculationResult = [\r\n    BK1: number,\r\n    BK2: number,\r\n    BK3: number,\r\n    BK4: number\r\n];\r\n\r\ninterface DataTable {\r\n    [key: string]: number[]\r\n}\r\n\r\nexport function calculate(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string\r\n): CalculationResult {\r\n    let frontAxleOverrideInKg: number = convertToKilo(frontAxleOverride);\r\n    let backAxleOverrideInKg: number = convertToKilo(backAxleOverride);\r\n\r\n    //Calculate\r\n    let bk1 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK1);\r\n    let bk2 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK2);\r\n    let bk3 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK3);\r\n    let bk4 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK4);\r\n\r\n    let result = [bk1, bk2, bk3, bk4] as CalculationResult;\r\n    return result;\r\n}\r\n\r\nfunction calculateBearingClass(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string,\r\n    bClass: BearingClass\r\n): number {\r\n\r\n    let frontAxleTableValue = getLoadWeightValue(frontAxleTableKey, bClass);\r\n    let backAxleTableValue = getLoadWeightValue(backAxleTableKey, bClass);\r\n    let grossWeightTableValue = getGrossWeightValue(grossWeightTableKey, bClass);\r\n\r\n    let frontAxleWeightAllowance = (frontAxleOverride <= frontAxleTableValue)\r\n        ? frontAxleOverride\r\n        : frontAxleTableValue;\r\n\r\n    let backAxleWeightAllowance = (backAxleOverride <= backAxleTableValue)\r\n        ? backAxleOverride\r\n        : backAxleTableValue;\r\n    \r\n    let vehicleWeightAllowanceSum = frontAxleWeightAllowance + backAxleWeightAllowance;\r\n\r\n    let grossWeightAllowance = (vehicleWeightAllowanceSum <= grossWeightTableValue)\r\n        ? vehicleWeightAllowanceSum\r\n        : grossWeightTableValue;\r\n\r\n    return grossWeightAllowance;\r\n}\r\n\r\nexport function convertToTonnes(value: number): number {\r\n    return (value > 1000) ? (value / 1000) : value;\r\n}\r\n\r\nexport function convertToKilo(value: number): number {\r\n    return (value < 1000) ? (value * 1000) : value;\r\n}\r\n\r\nfunction getGrossWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = grossWeightTable[key]\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}\r\n\r\nfunction getLoadWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = roadLoadTable[key];\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}","import React from 'react';\r\n\r\nexport const CalculatorIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n        <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n        <path fill=\"#fff\" d=\"M4 2h16a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm1 2v16h14V4H5zm2 2h10v4H7V6zm0 6h2v2H7v-2zm0 4h2v2H7v-2zm4-4h2v2h-2v-2zm0 4h2v2h-2v-2zm4-4h2v6h-2v-6z\" />\r\n    </svg>\r\n)","import React from 'react';\r\n\r\nexport const InformationIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n        <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n        <path fill=\"#fff\" d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM11 7h2v2h-2V7zm0 4h2v6h-2v-6z\" />\r\n    </svg>\r\n)","import React from 'react';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CalculatorIcon, InformationIcon } from '../icons'; \r\n\r\nexport const Menubar = () => {\r\n    const [t] = useTranslation();\r\n\r\n    return (\r\n        <nav className=\"app-menu\">\r\n            <MenuButton to=\"/\" icon={<CalculatorIcon />}>{t(\"interface.calculator\")}</MenuButton>\r\n            {(process.env.NODE_ENV && process.env.NODE_ENV === 'development') && (\r\n                <MenuButton to=\"/loading\">Loading</MenuButton>\r\n            )}\r\n            <MenuButton to=\"/about\" icon={<InformationIcon />}>{t(\"interface.about\")}</MenuButton>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst MenuButton = ({ children, to, icon }) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const match = (location.pathname === to);\r\n\r\n    const handleClick = () => {\r\n        navigate(to);\r\n    }\r\n    \r\n    return (\r\n        <button className={match ? \"menu-button active\" : \"menu-button\"}\r\n            onClick={() => handleClick()}\r\n        >\r\n            {icon && icon}\r\n            {children}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const LoadingSpinner = () => (\r\n    <div className=\"loading-spinner\">\r\n        <div className=\"spinner\">\r\n            <span>\r\n                <span>\r\n                    <span>\r\n                        <span />\r\n                    </span>\r\n                </span>\r\n            </span>\r\n\r\n        </div>\r\n    </div>\r\n)","import React from 'react';\r\nimport { LoadingSpinner } from '../components';\r\n\r\nexport const LoadingPage = () => (\r\n    <div class=\"loading-page\">\r\n        <LoadingSpinner />\r\n    </div>\r\n)","import \"./App.scss\";\nimport gwTable from \"./data/grossWeightTable.json\";\nimport rlTable from \"./data/roadLoadTable.json\";\nimport React, { useState } from \"react\";\nimport { calculate as calculateTS } from \"./functions/calculations.ts\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction App() {\n  const [t] = useTranslation();\n  const [serviceWeight, setServiceWeight] = useState(12000);\n  const [frontAxleOverride, setFrontAxleOverride] = useState(0);\n  const [backAxleOverride, setBackAxleOverride] = useState(0);\n  const [frontAxle, setFrontAxle] = useState(null);\n  const [backAxle, setBackAxle] = useState(null);\n  const [grossWeight, setGrossWeight] = useState(null);\n  const [displayKilos, setDisplayKilos] = useState(true);\n\n  const [result, setResult] = useState([0, 0, 0, 0]);\n\n  const handleServiceWeightChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setServiceWeight(value);\n  };\n\n  const handleFrontOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setFrontAxleOverride(value);\n  };\n\n  const handleBackOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setBackAxleOverride(value);\n  };\n\n  const handleFrontAxleChange = (evt) => {\n    let inputValue = evt.target.value;\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\n    setFrontAxle(value);\n  };\n\n  const handleBackAxleChange = (evt) => {\n    let inputValue = evt.target.value;\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\n    setBackAxle(value);\n  };\n\n  const handleGrossWeightChange = (evt) => {\n    let inputValue = evt.target.value;\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\n    setGrossWeight(value);\n  };\n\n  const handleNumericInputFocus = (evt) => evt.target.select();\n\n  const calculate = (evt) => {\n    console.table(frontAxleOverride, backAxleOverride, frontAxle, backAxle, grossWeight);\n    if (frontAxleOverride === null || frontAxleOverride === undefined) return;\n    if (backAxleOverride === null || backAxleOverride === undefined) return;\n    if (frontAxle === null || frontAxle === undefined) return;\n    if (backAxle === null || backAxle === undefined) return;\n    if (grossWeight === null || backAxle === undefined) return;\n\n    let result = calculateTS(\n      frontAxleOverride,\n      backAxleOverride,\n      frontAxle,\n      backAxle,\n      grossWeight\n    );\n\n    setResult(result);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <fieldset>\n          <legend>{t(\"vehicleSpecification\")}</legend>\n          <div className=\"form-control\">\n            <label>{t(\"vehicleWeight\")}</label>\n            <input\n              type=\"number\"\n              name=\"weight\"\n              value={serviceWeight}\n              onFocus={handleNumericInputFocus}\n              onChange={handleServiceWeightChange}\n              pattern=\"[0-9]*\"\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>{t(\"frontAxleOverride\")}</label>\n            <input\n              type=\"number\"\n              value={frontAxleOverride}\n              onFocus={handleNumericInputFocus}\n              onChange={handleFrontOverrideChange}\n              pattern=\"[0-9]*\"\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>{t(\"backAxleOverride\")}</label>\n            <input\n              type=\"number\"\n              value={backAxleOverride}\n              onFocus={handleNumericInputFocus}\n              onChange={handleBackOverrideChange}\n              pattern=\"[0-9]*\"\n            />\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>{t(\"tableSettings\")}</legend>\n          <div className=\"form-control\">\n            <label>{t(\"frontAxle\")}</label>\n            <select name=\"frontAxle\" onChange={handleFrontAxleChange}>\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>{t(\"backAxle\")}</label>\n            <select name=\"backAxle\" onChange={handleBackAxleChange}>\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>{t(\"weightTable\")}</label>\n            <select name=\"grossWeight\" onChange={handleGrossWeightChange}>\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\n              {Object.keys(gwTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n        </fieldset>\n        <div className=\"result-table\">\n          <table>\n            <thead>\n              <tr>\n                <td className=\"header\">{t(\"class\")}</td>\n                <td className=\"text-center header\">{t(\"weightAllowance\")}</td>\n                <td className=\"text-right header\">{t(\"allowedLoad\")}</td>\n              </tr>\n            </thead>\n            <tbody>\n              {result.map((r, i) => (\n                <tr>\n                  <td className=\"header\">BK{i + 1}</td>\n                  <td className=\"text-center\">\n                    {displayKilos ? (\n                      <span>{r} kg</span>\n                    ) : (\n                      <span>{r / 1000} t</span>\n                    )}\n                  </td>\n                  <td className=\"text-right\">\n                    {displayKilos ? (\n                      <span>{r - serviceWeight} kg</span>\n                    ) : (\n                      <span>{r / 1000 - serviceWeight} t</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"unit-toggle\">\n            <label onClick={() => setDisplayKilos(!displayKilos)}>\n              Display in Kilogram\n            </label>\n            <input\n              type=\"checkbox\"\n              checked={displayKilos}\n              onChange={() => setDisplayKilos(!displayKilos)}\n            />\n          </div>\n        </div>\n        <button onClick={() => calculate()} className=\"btn\">{t(\"interface.calculate\")}</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n, { InitOptions } from 'i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nconst options: InitOptions = {\r\n    fallbackLng: 'sv',\r\n    debug: true,\r\n    detection: {\r\n        order: ['queryString', 'cookie'],\r\n        caches: ['cookie']\r\n    },\r\n    interpolation: {\r\n        escapeValue: false\r\n    }\r\n}\r\n\r\ni18n.use(Backend)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .init(options)\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { AboutPage, LoadingPage } from './pages';\nimport { Menubar } from './components';\nimport App from './App';\nimport 'normalize.css';\nimport reportWebVitals from './reportWebVitals';\nimport './localisation/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<LoadingPage />}>\n      <Router>\n        <section className=\"app-content\">\n          <Routes>\n            <Route path=\"/\" element={<App />} />\n            <Route path=\"/loading\" element={<LoadingPage />} />\n            <Route path=\"/about\" />\n          </Routes>\n        </section>\n        <Menubar />\n      </Router>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}