{"version":3,"sources":["functions/calculations.ts","icons/calculatorIcon.tsx","icons/informationIcon.tsx","components/menubar.jsx","components/loadingSpinner.jsx","components/languageSwitcher.tsx","icons/teeko.jpg","pages/aboutPage.jsx","pages/loadingPage.jsx","App.js","reportWebVitals.js","localisation/i18n.ts","index.tsx"],"names":["BearingClass","CalculatorIcon","xmlns","viewBox","width","height","fill","d","InformationIcon","Menubar","useTranslation","t","className","to","icon","process","MenuButton","children","location","useLocation","navigate","useNavigate","match","pathname","onClick","LoadingSpinner","LanguageSwitcher","i18n","currentLanguage","language","setLanguage","changeLanguage","document","cookie","AboutPage","href","rel","target","alt","src","Teeko","LoadingPage","grossWeightTable","_grossWeightTable","roadLoadTable","_roadLoadTable","calculateBearingClass","frontAxleOverride","backAxleOverride","frontAxleTableKey","backAxleTableKey","grossWeightTableKey","bClass","bk","frontAxleTableValue","getLoadWeightValue","backAxleTableValue","grossWeightTableValue","convertToKilo","vehicleWeightAllowanceSum","convertToTonnes","value","calculateAllowedLoad","weightAllowance","serviceWeight","key","App","useState","setServiceWeight","setFrontAxleOverride","setBackAxleOverride","frontAxle","setFrontAxle","backAxle","setBackAxle","grossWeight","setGrossWeight","displayKilos","setDisplayKilos","result","setResult","handleNumericInputFocus","evt","select","calculate","console","table","undefined","frontAxleOverrideInKg","backAxleOverrideInKg","BK1","BK2","BK3","BK4","calculateTS","type","name","onFocus","onChange","parseFloat","pattern","inputValue","toString","Object","keys","rlTable","map","gwTable","r","i","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","detection","order","caches","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","path","element","getElementById"],"mappings":"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","file":"static/js/main.e2f19fce.chunk.js","sourcesContent":["import _grossWeightTable from '../data/grossWeightTable.json';\r\nimport _roadLoadTable from '../data/roadLoadTable.json';\r\n\r\nconst grossWeightTable = _grossWeightTable as DataTable;\r\nconst roadLoadTable = _roadLoadTable as DataTable;\r\n\r\nenum BearingClass {\r\n    BK1 = 0,\r\n    BK2 = 1,\r\n    BK3 = 2,\r\n    BK4 = 3\r\n}\r\n\r\ntype CalculationResult = [\r\n    BK1: number,\r\n    BK2: number,\r\n    BK3: number,\r\n    BK4: number\r\n];\r\n\r\ninterface DataTable {\r\n    [key: string]: number[]\r\n}\r\n\r\nexport function calculate(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string\r\n): CalculationResult {\r\n    let frontAxleOverrideInKg: number = convertToKilo(frontAxleOverride);\r\n    let backAxleOverrideInKg: number = convertToKilo(backAxleOverride);\r\n\r\n    //Calculate\r\n    let bk1 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK1);\r\n    let bk2 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK2);\r\n    let bk3 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK3);\r\n    let bk4 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK4);\r\n\r\n    let result = [bk1, bk2, bk3, bk4] as CalculationResult;\r\n    return result;\r\n}\r\n\r\nfunction calculateBearingClass(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string,\r\n    bClass: BearingClass\r\n): number {\r\n\r\n    let frontAxleTableValue = getLoadWeightValue(frontAxleTableKey, bClass);\r\n    let backAxleTableValue = getLoadWeightValue(backAxleTableKey, bClass);\r\n    let grossWeightTableValue = getGrossWeightValue(grossWeightTableKey, bClass);\r\n\r\n    let frontAxleWeightAllowance = (frontAxleOverride <= frontAxleTableValue)\r\n        ? frontAxleOverride\r\n        : frontAxleTableValue;\r\n\r\n    let backAxleWeightAllowance = (backAxleOverride <= backAxleTableValue)\r\n        ? backAxleOverride\r\n        : backAxleTableValue;\r\n    \r\n    let vehicleWeightAllowanceSum = frontAxleWeightAllowance + backAxleWeightAllowance;\r\n\r\n    let grossWeightAllowance = (vehicleWeightAllowanceSum <= grossWeightTableValue)\r\n        ? vehicleWeightAllowanceSum\r\n        : grossWeightTableValue;\r\n\r\n    return grossWeightAllowance;\r\n}\r\n\r\nexport function convertToTonnes(value: number): number {\r\n    return (value > 1000) ? (value / 1000) : value;\r\n}\r\n\r\nexport function convertToKilo(value: number): number {\r\n    return (value < 1000) ? (value * 1000) : value;\r\n}\r\n\r\nexport function calculateAllowedLoad(weightAllowance: number, serviceWeight: number): number {\r\n    let value = ((weightAllowance - serviceWeight) < 0) ? 0 : (weightAllowance - serviceWeight);\r\n    return value; \r\n}\r\n\r\nfunction getGrossWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = grossWeightTable[key]\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}\r\n\r\nfunction getLoadWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = roadLoadTable[key];\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}","import React from 'react';\r\n\r\nexport const CalculatorIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n        <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n        <path fill=\"#fff\" d=\"M4 2h16a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1zm1 2v16h14V4H5zm2 2h10v4H7V6zm0 6h2v2H7v-2zm0 4h2v2H7v-2zm4-4h2v2h-2v-2zm0 4h2v2h-2v-2zm4-4h2v6h-2v-6z\" />\r\n    </svg>\r\n)","import React from 'react';\r\n\r\nexport const InformationIcon = () => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n        <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n        <path fill=\"#fff\" d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM11 7h2v2h-2V7zm0 4h2v6h-2v-6z\" />\r\n    </svg>\r\n)","import React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CalculatorIcon, InformationIcon } from '../icons'; \r\n\r\nexport const Menubar = () => {\r\n    const [t] = useTranslation();\r\n\r\n    return (\r\n        <nav className=\"app-menu\">\r\n            <MenuButton to=\"/\" icon={<CalculatorIcon />}>{t(\"interface.calculator\")}</MenuButton>\r\n            {(process.env.NODE_ENV && process.env.NODE_ENV === 'development') && (\r\n                <MenuButton to=\"/loading\">Loading</MenuButton>\r\n            )}\r\n            <MenuButton to=\"/about\" icon={<InformationIcon />}>{t(\"interface.about\")}</MenuButton>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst MenuButton = ({ children, to, icon }) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const match = (location.pathname === to);\r\n\r\n    const handleClick = () => {\r\n        navigate(to);\r\n    }\r\n    \r\n    return (\r\n        <button className={match ? \"menu-button active\" : \"menu-button\"}\r\n            onClick={() => handleClick()}\r\n        >\r\n            {icon && icon}\r\n            {children}\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const LoadingSpinner = () => (\r\n    <div className=\"loading-spinner\">\r\n        <div className=\"spinner\">\r\n            <span>\r\n                <span>\r\n                    <span>\r\n                        <span />\r\n                    </span>\r\n                </span>\r\n            </span>\r\n\r\n        </div>\r\n    </div>\r\n)","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const LanguageSwitcher = () => {\r\n    const [t, i18n] = useTranslation()\r\n    const currentLanguage = i18n.language;\r\n    const setLanguage = (language: string) => {\r\n        i18n.changeLanguage(language);\r\n        document.cookie = `i18next=${language}`;\r\n    }\r\n    return (\r\n        <fieldset className=\"language-switcher\">\r\n            <legend>{t(\"interface.language\")}</legend>\r\n            <button className={currentLanguage === 'en' ? 'active' : ''} onClick={() => setLanguage(\"en\")}>English</button>\r\n            <button className={currentLanguage === 'sv' ? 'active' : ''} onClick={() => setLanguage(\"sv\")}>Svenska</button>\r\n        </fieldset>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/teeko.2d30ff3e.jpg\";","import React from 'react';\r\nimport { LanguageSwitcher } from '../components';\r\nimport Teeko from '../icons/teeko.jpg';\r\n\r\nexport const AboutPage = () => {\r\n    return (\r\n        <>\r\n            <section className=\"about-page\">\r\n                <h1>Holy shipping!</h1>\r\n                <p>To be frank, I'm not much for writing descriptions of things I create. It's something I ought to practise more on, since it usually comes back and bites me in the arse.</p>\r\n                <p>I wrote this application in conjunction with a dear friend, with the hopes of making a tedious task a bit easier to complete.</p>\r\n                <p>If you're interested in the project, the source-code is available on <a className=\"spiffy-link\" href=\"https://github.com/Dojan5/Truckle\" rel=\"noreferrer\" target=\"_blank\">on GitHub</a>. If you're interested in me, you can find my website over at <a className=\"spiffy-link\" href=\"https://grovecastle.me\" rel=\"noreferrer\" target=\"_blank\"> here.</a></p>\r\n                <p>Please enjoy this picture of my dog, Teeko.</p>\r\n                <img alt=\"Teeko\" src={Teeko} className=\"teeko-image\" />\r\n            </section>\r\n            <LanguageSwitcher />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { LoadingSpinner } from '../components';\r\n\r\nexport const LoadingPage = () => (\r\n    <div className=\"loading-page\">\r\n        <LoadingSpinner />\r\n    </div>\r\n)","import \"./App.scss\";\r\nimport gwTable from \"./data/grossWeightTable.json\";\r\nimport rlTable from \"./data/roadLoadTable.json\";\r\nimport React, { useState } from \"react\";\r\nimport { ToggleSwitch } from \"./components\";\r\nimport { calculate as calculateTS, calculateAllowedLoad, convertToTonnes } from \"./functions/calculations.ts\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nfunction App() {\r\n  const [t] = useTranslation();\r\n  const [serviceWeight, setServiceWeight] = useState(12000);\r\n  const [frontAxleOverride, setFrontAxleOverride] = useState(0);\r\n  const [backAxleOverride, setBackAxleOverride] = useState(0);\r\n  const [frontAxle, setFrontAxle] = useState(null);\r\n  const [backAxle, setBackAxle] = useState(null);\r\n  const [grossWeight, setGrossWeight] = useState(null);\r\n  const [displayKilos, setDisplayKilos] = useState(true);\r\n\r\n  const [result, setResult] = useState([0, 0, 0, 0]);\r\n\r\n  const handleServiceWeightChange = (evt) => {\r\n    let value = parseFloat(evt.target.value);\r\n    setServiceWeight(value);\r\n  };\r\n\r\n  const handleFrontOverrideChange = (evt) => {\r\n    let value = parseFloat(evt.target.value);\r\n    setFrontAxleOverride(value);\r\n  };\r\n\r\n  const handleBackOverrideChange = (evt) => {\r\n    let value = parseFloat(evt.target.value);\r\n    setBackAxleOverride(value);\r\n  };\r\n\r\n  const handleFrontAxleChange = (evt) => {\r\n    let inputValue = evt.target.value;\r\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\r\n    setFrontAxle(value);\r\n  };\r\n\r\n  const handleBackAxleChange = (evt) => {\r\n    let inputValue = evt.target.value;\r\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\r\n    setBackAxle(value);\r\n  };\r\n\r\n  const handleGrossWeightChange = (evt) => {\r\n    let inputValue = evt.target.value;\r\n    let value = (typeof(inputValue) !== \"string\") ? inputValue.toString() : inputValue;\r\n    setGrossWeight(value);\r\n  };\r\n\r\n  const handleNumericInputFocus = (evt) => evt.target.select();\r\n\r\n  const calculate = (evt) => {\r\n    console.table(frontAxleOverride, backAxleOverride, frontAxle, backAxle, grossWeight);\r\n    if (frontAxleOverride === null || frontAxleOverride === undefined) return;\r\n    if (backAxleOverride === null || backAxleOverride === undefined) return;\r\n    if (frontAxle === null || frontAxle === undefined) return;\r\n    if (backAxle === null || backAxle === undefined) return;\r\n    if (grossWeight === null || backAxle === undefined) return;\r\n\r\n    let result = calculateTS(\r\n      frontAxleOverride,\r\n      backAxleOverride,\r\n      frontAxle,\r\n      backAxle,\r\n      grossWeight\r\n    );\r\n\r\n    setResult(result);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <fieldset>\r\n          <legend>{t(\"vehicleSpecification\")}</legend>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"vehicleWeight\")}</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"weight\"\r\n              value={serviceWeight}\r\n              onFocus={handleNumericInputFocus}\r\n              onChange={handleServiceWeightChange}\r\n              pattern=\"[0-9]*\"\r\n            />\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"frontAxleOverride\")}</label>\r\n            <input\r\n              type=\"number\"\r\n              value={frontAxleOverride}\r\n              onFocus={handleNumericInputFocus}\r\n              onChange={handleFrontOverrideChange}\r\n              pattern=\"[0-9]*\"\r\n            />\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"backAxleOverride\")}</label>\r\n            <input\r\n              type=\"number\"\r\n              value={backAxleOverride}\r\n              onFocus={handleNumericInputFocus}\r\n              onChange={handleBackOverrideChange}\r\n              pattern=\"[0-9]*\"\r\n            />\r\n          </div>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>{t(\"tableSettings\")}</legend>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"frontAxle\")}</label>\r\n            <select name=\"frontAxle\" onChange={handleFrontAxleChange}>\r\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\r\n              {Object.keys(rlTable).map((key) => (\r\n                <option key={\"fa\" + key} value={key}>{key}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"backAxle\")}</label>\r\n            <select name=\"backAxle\" onChange={handleBackAxleChange}>\r\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\r\n              {Object.keys(rlTable).map((key) => (\r\n                <option key={\"ba\" + key} value={key}>{key}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label>{t(\"weightTable\")}</label>\r\n            <select name=\"grossWeight\" onChange={handleGrossWeightChange}>\r\n              <option value={null}>{t(\"interface.pleaseSelect\")}</option>\r\n              {Object.keys(gwTable).map((key) => (\r\n                <option key={\"gw\" + key} value={key}>{key}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <div className=\"result-table\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td className=\"header\">{t(\"class\")}</td>\r\n                <td className=\"text-center header\">{t(\"weightAllowance\")}</td>\r\n                <td className=\"text-right header\">{t(\"allowedLoad\")}</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {result.map((r, i) => (\r\n                <tr key={\"r\" + i}>\r\n                  <td className=\"header\">BK{i + 1}</td>\r\n                  <td className=\"text-center\">\r\n                    {displayKilos ? (\r\n                      <span>{r} kg</span>\r\n                    ) : (\r\n                      <span>{convertToTonnes(r)} t</span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"text-right\">\r\n                    {displayKilos ? (\r\n                      <span>{calculateAllowedLoad(r, serviceWeight)} kg</span>\r\n                    ) : (\r\n                      <span>{convertToTonnes(calculateAllowedLoad(r, serviceWeight))} t</span>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"unit-toggle\">\r\n            <label onClick={() => setDisplayKilos(!displayKilos)}>\r\n              Display in Kilogram\r\n            </label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={displayKilos}\r\n              onChange={() => setDisplayKilos(!displayKilos)}\r\n            />\r\n            {/* <ToggleSwitch clickHandler={() => setDisplayKilos(!displayKilos)} toggleState={displayKilos} /> */}\r\n          </div>\r\n        </div>\r\n        <button onClick={() => calculate()} className=\"btn\">{t(\"interface.calculate\")}</button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import i18n, { InitOptions } from 'i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nconst options: InitOptions = {\r\n    fallbackLng: 'sv',\r\n    debug: true,\r\n    detection: {\r\n        order: ['queryString', 'cookie'],\r\n        caches: ['cookie']\r\n    },\r\n    interpolation: {\r\n        escapeValue: false\r\n    }\r\n}\r\n\r\ni18n.use(Backend)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .init(options)\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport { AboutPage, LoadingPage } from './pages';\r\nimport { Menubar } from './components';\r\nimport App from './App';\r\nimport 'normalize.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './localisation/i18n';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<LoadingPage />}>\r\n      <Router>\r\n        <section className=\"app-content\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<App />} />\r\n            <Route path=\"/loading\" element={<LoadingPage />} />\r\n            <Route path=\"/about\" element={<AboutPage />} />\r\n          </Routes>\r\n        </section>\r\n        <Menubar />\r\n      </Router>\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}