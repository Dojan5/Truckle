{"version":3,"sources":["functions/calculations.ts","App.js","reportWebVitals.js","index.js"],"names":["BearingClass","grossWeightTable","_grossWeightTable","roadLoadTable","_roadLoadTable","calculateBearingClass","frontAxleOverride","backAxleOverride","frontAxleTableKey","backAxleTableKey","grossWeightTableKey","bClass","bk","frontAxleTableValue","getLoadWeightValue","backAxleTableValue","grossWeightTableValue","convertToKilo","vehicleWeightAllowanceSum","value","key","App","useState","serviceWeight","setServiceWeight","setFrontAxleOverride","setBackAxleOverride","rlTable","singleAxleNoPower","frontAxle","setFrontAxle","backAxle","setBackAxle","gwTable","grossWeight","setGrossWeight","displayKilos","setDisplayKilos","result","setResult","className","type","name","onChange","evt","parseFloat","target","Object","keys","map","r","i","onClick","checked","frontAxleOverrideInKg","backAxleOverrideInKg","BK1","BK2","BK3","BK4","calculateTS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de282887.chunk.js","sourcesContent":["import _grossWeightTable from '../data/grossWeightTable.json';\r\nimport _roadLoadTable from '../data/roadLoadTable.json';\r\n\r\nconst grossWeightTable = _grossWeightTable as DataTable;\r\nconst roadLoadTable = _roadLoadTable as DataTable;\r\n\r\nenum BearingClass {\r\n    BK1 = 0,\r\n    BK2 = 1,\r\n    BK3 = 2,\r\n    BK4 = 3\r\n}\r\n\r\ntype CalculationResult = [\r\n    BK1: number,\r\n    BK2: number,\r\n    BK3: number,\r\n    BK4: number\r\n];\r\n\r\ninterface DataTable {\r\n    [key: string]: number[]\r\n}\r\n\r\nexport function calculate(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string\r\n): CalculationResult {\r\n    let frontAxleOverrideInKg: number = convertToKilo(frontAxleOverride);\r\n    let backAxleOverrideInKg: number = convertToKilo(backAxleOverride);\r\n\r\n    //Calculate\r\n    let bk1 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK1);\r\n    let bk2 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK2);\r\n    let bk3 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK3);\r\n    let bk4 = calculateBearingClass(frontAxleOverrideInKg, backAxleOverrideInKg, frontAxleTableKey, backAxleTableKey, grossWeightTableKey, BearingClass.BK4);\r\n\r\n    let result = [bk1, bk2, bk3, bk4] as CalculationResult;\r\n    return result;\r\n}\r\n\r\nfunction calculateBearingClass(\r\n    frontAxleOverride: number,\r\n    backAxleOverride: number,\r\n    frontAxleTableKey: string,\r\n    backAxleTableKey: string,\r\n    grossWeightTableKey: string,\r\n    bClass: BearingClass\r\n): number {\r\n\r\n    let frontAxleTableValue = getLoadWeightValue(frontAxleTableKey, bClass);\r\n    let backAxleTableValue = getLoadWeightValue(backAxleTableKey, bClass);\r\n    let grossWeightTableValue = getGrossWeightValue(grossWeightTableKey, bClass);\r\n\r\n    let frontAxleWeightAllowance = (frontAxleOverride <= frontAxleTableValue)\r\n        ? frontAxleOverride\r\n        : frontAxleTableValue;\r\n\r\n    let backAxleWeightAllowance = (backAxleOverride <= backAxleTableValue)\r\n        ? backAxleOverride\r\n        : backAxleTableValue;\r\n    \r\n    let vehicleWeightAllowanceSum = frontAxleWeightAllowance + backAxleWeightAllowance;\r\n\r\n    let grossWeightAllowance = (vehicleWeightAllowanceSum <= grossWeightTableValue)\r\n        ? vehicleWeightAllowanceSum\r\n        : grossWeightTableValue;\r\n\r\n    return grossWeightAllowance;\r\n}\r\n\r\nexport function convertToTonnes(value: number): number {\r\n    return (value > 1000) ? (value / 1000) : value;\r\n}\r\n\r\nexport function convertToKilo(value: number): number {\r\n    return (value < 1000) ? (value * 1000) : value;\r\n}\r\n\r\nfunction getGrossWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = grossWeightTable[key]\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}\r\n\r\nfunction getLoadWeightValue(key: string, bk: BearingClass): number {\r\n    let tableValue = roadLoadTable[key];\r\n    let value = convertToKilo(tableValue[bk]);\r\n    return value;\r\n}","import \"./App.scss\";\nimport gwTable from \"./data/grossWeightTable.json\";\nimport rlTable from \"./data/roadLoadTable.json\";\nimport React, { useState } from \"react\";\nimport { calculate as calculateTS } from \"./functions/calculations.ts\";\n\nfunction App() {\n  const [serviceWeight, setServiceWeight] = useState(12000);\n  const [frontAxleOverride, setFrontAxleOverride] = useState(0);\n  const [backAxleOverride, setBackAxleOverride] = useState(0);\n  const [frontAxle, setFrontAxle] = useState(rlTable.singleAxleNoPower);\n  const [backAxle, setBackAxle] = useState(rlTable.singleAxleNoPower);\n  const [grossWeight, setGrossWeight] = useState(gwTable[0]);\n  const [displayKilos, setDisplayKilos] = useState(true);\n\n  const [result, setResult] = useState([0, 0, 0, 0]);\n\n  const handleServiceWeightChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setServiceWeight(value);\n  };\n\n  const handleFrontOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setFrontAxleOverride(value);\n  };\n\n  const handleBackOverrideChange = (evt) => {\n    let value = parseFloat(evt.target.value);\n    setBackAxleOverride(value);\n  };\n\n  const handleFrontAxleChange = (evt) => {\n    setFrontAxle(evt.target.value);\n  };\n\n  const handleBackAxleChange = (evt) => {\n    setBackAxle(evt.target.value);\n  };\n\n  const handleGrossWeightChange = (evt) => {\n    setGrossWeight(evt.target.value);\n  };\n\n  const calculate = (evt) => {\n    if (frontAxle === null) return;\n    if (backAxle === null) return;\n    if (grossWeight === null) return;\n\n    let result = calculateTS(\n      frontAxleOverride,\n      backAxleOverride,\n      frontAxle,\n      backAxle,\n      grossWeight\n    );\n\n    setResult(result);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <fieldset>\n          <legend>Vehicle Specification</legend>\n          <div className=\"form-control\">\n            <label>Vehicle weight</label>\n            <input\n              type=\"number\"\n              name=\"weight\"\n              value={serviceWeight}\n              onChange={handleServiceWeightChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Front axle override</label>\n            <input\n              type=\"number\"\n              value={frontAxleOverride}\n              onChange={handleFrontOverrideChange}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle override</label>\n            <input\n              type=\"number\"\n              value={backAxleOverride}\n              onChange={handleBackOverrideChange}\n            />\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Table Settings</legend>\n          <div className=\"form-control\">\n            <label>Front axle</label>\n            <select name=\"frontAxle\" onChange={handleFrontAxleChange}>\n              <option value={null}>Please select</option>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Back axle</label>\n            <select name=\"backAxle\" onChange={handleBackAxleChange}>\n              <option value={null}>Please select</option>\n              {Object.keys(rlTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label>Weight Table</label>\n            <select name=\"grossWeight\" onChange={handleGrossWeightChange}>\n              <option value={null}>Please select</option>\n              {Object.keys(gwTable).map((key) => (\n                <option value={key}>{key}</option>\n              ))}\n            </select>\n          </div>\n        </fieldset>\n        <div className=\"result-table\">\n          <table>\n            <thead>\n              <tr>\n                <td className=\"header\">Class</td>\n                <td className=\"text-center header\">Weight Allowance</td>\n                <td className=\"text-right header\">Allowed Load</td>\n              </tr>\n            </thead>\n            <tbody>\n              {result.map((r, i) => (\n                <tr>\n                  <td className=\"header\">BK{i + 1}</td>\n                  <td className=\"text-center\">\n                    {displayKilos ? (\n                      <span>{r} kg</span>\n                    ) : (\n                      <span>{r / 1000} t</span>\n                    )}\n                  </td>\n                  <td className=\"text-right\">\n                    {displayKilos ? (\n                      <span>{r - serviceWeight} kg</span>\n                    ) : (\n                      <span>{r / 1000 - serviceWeight} t</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"unit-toggle\">\n            <label onClick={() => setDisplayKilos(!displayKilos)}>\n              Display in Kilogram\n            </label>\n            <input\n              type=\"checkbox\"\n              checked={displayKilos}\n              onChange={() => setDisplayKilos(!displayKilos)}\n            />\n          </div>\n        </div>\n        <button className=\"btn\" onClick={calculate}>\n          Calculate\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'normalize.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}